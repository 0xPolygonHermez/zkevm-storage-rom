Set_DeleteFound:

    ; Root Node                               Root Node (modified)                          # end of tree
    ;  / \                                     / \                                          |
    ;     Intermediate Node                       Intermediate Node (modified)              ^ climb tree
    ;      / \                                    / \                                       |
    ;         Intermediate Node        -->           Sibling Node (common RKEY lower bits)  ^ end of branch
    ;          / \                                                                          |
    ;             Intermediate Node                                                         ^ climb branch
    ;              / \                                                                      |
    ;   Sibling Node  Old Value Node (to delete)                                            * start here


    ; This operations is named deleted found because it is the opposite operation of insert found
    ; After deleting the node, the remaining sibling will have to be reallocated at a higher level
    ; All the intermediate nodes of that branch will have to be deleted

    ; Create the 2 new leaf nodes: for the old found value, and for the new value

    ; FUTURE OPTIMIZATION: directly get hash of old value, save one hash.
    ; OldValueHash = Hash0( OLD_VALUE_LOW, OLD_VALUE_HIGH )
    ${GetOldValueLow()} => HASH_LEFT
    ${GetOldValueHigh()} => HASH_RIGHT
    $ => HASH_RIGHT                             :HASH0

    ; OldRoot = LeafNodeHash = Hash1( RKEY, Hash0( OLD_VALUE_LOW, OLD_VALUE_HIGH ) )
    ${GetRkey()} => RKEY, HASH_LEFT
    $ => OLD_ROOT                               :HASH1

    ; FUTURE OPTIMIZATION: directly get hash of sibling value, save one hash.
    ; NewValueHash = Hash0( SIBLING_VALUE_LOW, SIBLING_VALUE_HIGH )
    ${GetSiblingValueLow()} => HASH_LEFT
    ${GetSiblingValueHigh()} => HASH_RIGHT
    $ => SIBLING_VALUE_HASH, HASH_RIGHT         :HASH0

    ; NewRoot = LeafNodeHash = Hash1( SIBLING_RKEY, SIBLING_VALUE_HASH )
    ${GetSiblingRkey()} => SIBLING_RKEY, HASH_LEFT
    $ => NEW_ROOT                               :HASH1

    ; At this point:
    ; VALUE_LOW = VALUE_HIGH = 0
    ; OLD_ROOT = Old key value leaf node hash
    ; NEW_ROOT = Old sibbling leaf node hash (old because after climbup,
    ;            sibling rkey increase with bits of climbup path)

SDF_InitLevel:

    ; Init LEVEL
    ${GetLevel()} => LEVEL

    ; Create the first intermediate node that joins the old value and
    ;the old sibling leaf nodes

SDF_FirstIntermediateNode:

    LEVEL - 1 => LEVEL

    ; If next key bit is zero, then sibling is right (sibling's next key bit is 1)
    ${GetNextKeyBit()} => RKEY_BIT              :JMPZ(SDF_SiblingIsRight1)

SDF_SiblingIsLeft1:

    ; OldRoot = Hash0( SiblingHash, LeafNodeHash )
    NEW_ROOT => HASH_LEFT
    OLD_ROOT => HASH_RIGHT
    $ => OLD_ROOT                               :HASH0

    $ => RKEY                                   :CLIMB_RKEY
    ; using CLIMB_SIBLING_RKEY_N to climb with negation of RKEY_BIT because we
    ; are in divergent leaf node, sibling with at least with this bit diferent
    ; than key to delete.
    $ => SIBLING_RKEY                           :CLIMB_SIBLING_RKEY_N, JMP(SDF_ClimbBranch)

SDF_SiblingIsRight1:

    ; OldRoot = Hash0( LeafNodeHash, SiblingHash )
    OLD_ROOT => HASH_LEFT
    NEW_ROOT => HASH_RIGHT
    $ => OLD_ROOT                               :HASH0

    ; Update remaining keys
    $ => RKEY                                   :CLIMB_RKEY
    ; using CLIMB_SIBLING_RKEY_N to climb with negation of RKEY_BIT because we
    ; are in divergent leaf node, sibling with at least with this bit diferent
    ; than key to delete.
    $ => SIBLING_RKEY                           :CLIMB_SIBLING_RKEY_N

SDF_ClimbBranch:
    ; In this point we start to climb using same bit for CLIB_SIBLING_RKEY and RKEY,
    ; to rebuild the correct SIBLING_RKEY.

    ; If we are at the top of the branch, means the first node without empty sibling,
    ; it this point must be leaf sibling climbed. It this situation go to SDF_StartNewRoot
    ${GetTopOfBranch()}                         :JMPZ(SDF_StartNewRoot)

    LEVEL - 1 => LEVEL

    ; If next key bit is zero, then sibling is right (sibling's next key bit is 1)
    ${GetNextKeyBit()} => RKEY_BIT              :JMPZ(SDF_SiblingIsRight2)

    ; using 0 as sibling because we are climbing up through the intermediate nodes that will
    ; be collapsed or eliminated. This intermediates are empty, they only made sense
    ; before deleting the key.

SDF_SiblingIsLeft2:

    ; NewRoot = Hash0( 0, NewRoot )
    0x0 => HASH_LEFT
    OLD_ROOT => HASH_RIGHT          :JMP(SDF_SiblingClimbKey2)

SDF_SiblingIsRight2:

    ; NewRoot = Hash0( NewRoot, 0 )
    OLD_ROOT => HASH_LEFT
    0x0 => HASH_RIGHT

SDF_SiblingClimbKey2:
    $ => OLD_ROOT                   :HASH0

    $ => RKEY                       :CLIMB_RKEY
    $ => SIBLING_RKEY               :CLIMB_SIBLING_RKEY, JMP(SDF_ClimbBranch)

SDF_StartNewRoot:
    ; At this point we have an rebuilded SIBLING_RKEY from old SIBLING_RKEY and
    ; following correct path (first bit diferent, an others same as RKEY)

    ; NewRoot = Hash1( SIBLING_RKEY, SIBLING_VALUE_HASH );
    SIBLING_RKEY => HASH_LEFT
    SIBLING_VALUE_HASH => HASH_RIGHT
    $ => NEW_ROOT                   :HASH1

    ; SIBLING_RKEY is unnecessary after rebuilding the new leaf node
    ; because it isn't used anymore.

    ; If we are at the top of the tree, then go to SDF_Latch
    LEVEL                           :JMPZ(SDF_Latch)

    LEVEL - 1 => LEVEL

    ; check in a trusted way that we are on top of the branch, which means
    ; the sibling is not zero.
    ${GetSiblingHash()} => HASH_LEFT, HASH_RIGHT, VALUE_HIGH :JMPNZ(SDF_SiblingHashIsNotZero) ;VH[0]
    ROTL_VH => VALUE_HIGH           :JMPNZ(SDF_SiblingHashIsNotZero) ; VH[3]
    ROTL_VH => VALUE_HIGH           :JMPNZ(SDF_SiblingHashIsNotZero) ; VH[2]
    ROTL_VH => VALUE_HIGH           :JMPNZ(SDF_SiblingHashIsNotZero) ; VH[1]
                                    ; MAP really we aren't on top of branch
                                    :JMP(AssertFails)
SDF_SiblingHashIsNotZero:

    0 => VALUE_HIGH

    ; If next key bit is zero, then sibling is right (sibling's next key bit is 1)
    ; GetNextKeyBit decrease level
    ${GetNextKeyBit()} => RKEY_BIT  :JMPZ(SDF_SiblingIsRight3)

    ; HASH_LEFT, HASH_RIGHT contains sibling hash. One of them will
    ; overwrite with the new leaf node stored on NEW_ROOT

SDF_SiblingIsLeft3:

    ; NewRoot = Hash0 ( SiblingHash, NewRoot )
    ; HASH_LEFT = HASH_RIGHT = SiblingHash

    NEW_ROOT => HASH_RIGHT
    $ => NEW_ROOT                   :HASH0

    ; OldRoot = Hash0 ( SiblingHash, OldRoot )
    OLD_ROOT => HASH_RIGHT
    $ => OLD_ROOT                   :HASH0

    ; Update remaining keys
    $ => RKEY                       :CLIMB_RKEY, JMP(SDF_ClimbTree)

SDF_SiblingIsRight3:

    ; NewRoot = Hash0 ( NewRoot, SiblingHash )
    ; HASH_LEFT = HASH_RIGHT = SiblingHash
    NEW_ROOT => HASH_LEFT
    $ => NEW_ROOT                   :HASH0

    ; OldRoot = Hash0 ( OldRoot, SiblingHash )
    OLD_ROOT => HASH_LEFT
    $ => OLD_ROOT                   :HASH0

    ; Update remaining keys
    $ => RKEY                       :CLIMB_RKEY

    ; At this point, we climb up regularly, rebuilding the new
    ; and the old roots, using same RKEY_BIT.

SDF_ClimbTree:

    ; If we are at the top of the tree, then go to SDF_Latch
    LEVEL                           :JMPZ(SDF_Latch)
    LEVEL - 1 => LEVEL

    ; If next key bit is zero, then sibling is right (sibling's next key bit is 1)
    ${GetNextKeyBit()} => RKEY_BIT  :JMPZ(SDF_SiblingIsRight4)

SDF_SiblingIsLeft4:

    ; NewRoot = Hash0 ( SiblingHash, NewRoot )
    ${GetSiblingHash()} => HASH_LEFT
    NEW_ROOT => HASH_RIGHT
    $ => NEW_ROOT                   :HASH0

    ; OldRoot = Hash0 ( SiblingHash, OldRoot )
    OLD_ROOT => HASH_RIGHT
    $ => OLD_ROOT                   :HASH0

    ; Update remaining keys
    $ => RKEY                       :CLIMB_RKEY, JMP(SDF_ClimbTree)

SDF_SiblingIsRight4:

    ; NewRoot = Hash0 ( NewRoot, SiblingHash )
    NEW_ROOT => HASH_LEFT
    ${GetSiblingHash()} => HASH_RIGHT
    $ => NEW_ROOT                   :HASH0

    ; OldRoot = Hash1 ( OldRoot, SiblingHash )
    OLD_ROOT => HASH_LEFT
    $ => OLD_ROOT                   :HASH0

    ; Update remaining keys
    $ => RKEY                       :CLIMB_RKEY, JMP(SDF_ClimbTree)

SDF_Latch:

    ; At this point consistency is granted: OLD_ROOT, NEW_ROOT, RKEY (complete key), VALUE_LOW, VALUE_HIGH, LEVEL
    ; Return to the main loop
                                    :LATCH_SET, JMP(Run)