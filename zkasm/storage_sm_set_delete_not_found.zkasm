Set_DeleteNotFound:

    ; Root Node             Root Node (modified)                   # end of tree
    ;  / \                   / \                                   |
    ;    Intermediate Node      Intermediate Node (modified)       ^ climb tree
    ;     /\                     / \                               |
    ;       Old Value Node  --->    Old Value Node (delete)        * start here


    ; We have found a leaf node to delete, but the DeleteNotFound name is given since this is the symmetric
    ; case of InsertNotFound, but swapping old root and new root
    ; We have to (pretend to) delete the old leaf node and climb the tree until the top, i.e. until the root

    ; Create the a old leaf node for the old value
    
    ; OldValueHash = Hash0( OLD_VALUE_LOW, OLD_VALUE_HIGH )
    ${GetOldValueLow()} => HASH_LEFT
    ${GetOldValueHigh()} => HASH_RIGHT
    $ => HASH_RIGHT                 :HASH0

    ; OldRoot = LeafNodeHash = Hash1( RKEY, Hash0( OLD_VALUE_LOW, OLD_VALUE_HIGH ) )
    ${GetRkey()} => RKEY, HASH_LEFT
    $ => OLD_ROOT                   :HASH1

SDNF_InitLevel:

    ; Init LEVEL register to {1,0,0,0}, and inversely rotate it level%4 times,
    ; so that after level rotations the position of LEVEL becomes {1,0,0,0} again
    0x01 => LEVEL

    ; If level bit 0 is 1, then do 1 inverse rotation (i.e. 3 normal rotations)
    ${GetLevelBit(0)}               :JMPZ(SDNF_LevelBit1)
                                    :ROTATE_LEVEL
                                    :ROTATE_LEVEL
                                    :ROTATE_LEVEL

SDNF_LevelBit1:

    ; If level bit 1 is 1, then do 2 inverse rotations (i.e. 2 normal rotations)
    ${GetLevelBit(1)}               :JMPZ(SDNF_StartNewRoot)
                                    :ROTATE_LEVEL
                                    :ROTATE_LEVEL

    ; Create the first leaf empty node

SDNF_StartNewRoot:
    ; NewRoot = 0, NewValue = 0
    0x0 => NEW_ROOT, VALUE_LOW, VALUE_HIGH

SDNF_ClimbTree:

    ; If we are at the top of the tree, then go to SDNF_Latch
    ${GetTopTree()}               :JMPZ(SDNF_Latch)

    ${GetNextKeyBit()} => RKEY_BIT  :JMPZ(SDNF_SiblingIsRight3)

SDNF_SiblingIsLeft3:

    ; NewRoot = Hash ( SiblingHash, NewRoot )
    NEW_ROOT => HASH_RIGHT
    ${GetSiblingHash()} => HASH_LEFT
    $ => NEW_ROOT                   :HASH0

    ; OldRoot = Hash ( SiblingHash, OldRoot )
    OLD_ROOT => HASH_RIGHT
    $ => OLD_ROOT                   :HASH0

    ; Update remaining key
                                    :ROTATE_LEVEL
                                    :CLIMB_RKEY

                                    :JMP(SDNF_ClimbTree)

SDNF_SiblingIsRight3:

    ; NewRoot = Hash ( NewRoot, SiblingHash )
    NEW_ROOT => HASH_LEFT
    ${GetSiblingHash()} => HASH_RIGHT
    $ => NEW_ROOT                   :HASH0

    ; OldRoot = Hash ( OldRoot, SiblingHash )
    OLD_ROOT => HASH_LEFT
    $ => OLD_ROOT                   :HASH0

    ; Update remaining key
                                    :ROTATE_LEVEL
                                    :CLIMB_RKEY

                                    :JMP(SDNF_ClimbTree)

SDNF_Latch:

    ; At this point consistency is granted: OLD_ROOT, NEW_ROOT, RKEY (complete key), VALUE_LOW, VALUE_HIGH, LEVEL
                                    :LATCH_SET

    ; Return to the main loop
                                    :JMP(Run)