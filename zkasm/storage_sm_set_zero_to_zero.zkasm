Set_ZeroToZero:

    ; Since we are setting a zero in a key that already had a zero,
    ; we initialize roots at zero and climb the tree up to the top

    ; Case 1: Adding a zero having an Intermediate node as sibling
    ;  Root Node             Root Node (same as before)              # end of tree
    ;   / \                   / \                                    |
    ;     Intermediate Node      Intermediate Node (same as before)  ^ climb tree
    ;      / \                     / \                               |
    ; Sibling 0        ---> Sibling   0 (same as before)             * start here

    ; Case 2: Adding a zero having a leaf node as sibling
    ;  Root Node             Root Node (same as before)              # end of tree
    ;   / \                   / \                                    |
    ;     Intermediate Node      Intermediate Node (same as before)  ^ climb tree
    ;      / \                     / \                               |
    ; Sibling Sibling  ---> Sibling   Sibling                        |
    ;                                    \                           |
    ;                                     0 (same as before)         * start here

    ${GetRkey()} => RKEY                
    
    ${GetIsOld0()}                  :JMPZ(SZTZ_IsLeafNode)
                                    :JMP(SZTZ_IsIntermediateNode)

 SZTZ_IsLeafNode:                                   
    ; OldValueHash = Hash0( SIBLING_VALUE_LOW, SIBLING_VALUE_HIGH )
    ${GetSiblingValueLow()} => HASH_LEFT
    ${GetSiblingValueHigh()} => HASH_RIGHT
    $ => SIBLING_VALUE_HASH, HASH_RIGHT :HASH0

    ; OldRoot = LeafNodeHash = Hash1( RKEY, Hash0( SIBLING_VALUE_LOW, SIBLING_VALUE_HIGH ) )
    ${GetSiblingRkey()} => HASH_LEFT
    $ => OLD_ROOT                   :HASH1

    ; NewRoot = OldRoot
    OLD_ROOT => NEW_ROOT            :JMP(SZTZ_InitLevel)

    ; VALUE_LOW, VALUE_HIGH are zero (initialized to 0 in storage_sm.zkasm)

SZTZ_IsIntermediateNode:
    ; VALUE_LOW, VALUE_HIGH are zero (initialized to 0 in storage_sm.zkasm)
    ; OLD_ROOT, NEW_ROOT are zero (initialized to 0 in storage_sm.zkasm)

SZTZ_InitLevel:
    ; Init LEVEL register is set to {1,0,0,0}, and inversely rotate it level%4 times,
    ; so that after level rotations the position of LEVEL becomes {1,0,0,0} again
    ; If level bit 0 is 1, then do 1 inverse rotation (i.e. 3 normal rotations)
    0x1 => LEVEL    
    ${GetLevelBit(0)}               :JMPZ(SZTZ_LevelBit1)
                                    :ROTATE_LEVEL
                                    :ROTATE_LEVEL
                                    :ROTATE_LEVEL

SZTZ_LevelBit1:

    ; If level bit 1 is 1, then do 2 inverse rotations (i.e. 2 normal rotations)
    ${GetLevelBit(1)}               :JMPZ(SZTZ_ClimbTree)
                                    :ROTATE_LEVEL
                                    :ROTATE_LEVEL

SZTZ_ClimbTree:

    ; If we are at the top of the tree, then goto Get_Latch
    ${GetTopTree()}                 :JMPZ(SZTZ_Latch)

    ; If next key bit is zero, then the sibling hash must be at the right (sibling's key bit is 1)
    ${GetNextKeyBit()} => RKEY_BIT  :JMPZ(SZTZ_SiblingIsRight)

SZTZ_SiblingIsLeft:

    ; NewRoot = Hash0( SiblingHash, NewRoot )
    ${GetSiblingHash()} => HASH_LEFT
    NEW_ROOT => HASH_RIGHT
    $ => NEW_ROOT                   :HASH0

    ; OldRoot = Hash0( SiblingHash, OldRoot )
    OLD_ROOT => HASH_RIGHT                      ; Sibling hash is already in HASH_LEFT, since previous hash
    $ => OLD_ROOT                   :HASH0

    ; Update remaining key
                                    :ROTATE_LEVEL
                                    :CLIMB_RKEY

                                    :JMP(SZTZ_ClimbTree)

SZTZ_SiblingIsRight:

    ; NewRoot = Hash0( NewRoot, SiblingHash )
    NEW_ROOT => HASH_LEFT
    ${GetSiblingHash()} => HASH_RIGHT
    $ => NEW_ROOT                   :HASH0

    ; OldRoot = Hash0( OldRoot, SiblingHash )
    OLD_ROOT => HASH_LEFT                       ; Sibling hash is already in HASH_RIGHT, since previous hash
    $ => OLD_ROOT                   :HASH0

    ; SZTZ remaining key
                                    :ROTATE_LEVEL
                                    :CLIMB_RKEY

                                    :JMP(SZTZ_ClimbTree)

SZTZ_Latch:

    ; At this point consistency is granted: OLD_ROOT, NEW_ROOT, RKEY (complete key), VALUE_LOW, VALUE_HIGH, LEVEL
                                    :LATCH_SET

    ; Return to the main loop
                                    :JMP(Run)
