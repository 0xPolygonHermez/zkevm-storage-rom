Update:

    ${GetRKey()} => RKEY

    ; OldRoot = LeafNodeHash = Hash( 1 | 0 | 0 | 0, Hash( Key, Hash( OldValue[0-3], OldValue[4-7] ) ) )
    ${GetOldValueLow()} => VALUE_LOW
    VALUE_LOW => HASH_LEFT
    ${GetOldValueHigh()} => VALUE_HIGH
    VALUE_HIGH => HASH_RIGHT
    $ => HASH_RIGHT                 :HASH0
    RKEY => HASH_LEFT
    $ => HASH_RIGHT                 :HASH0
    0x1 => HASH_LEFT
    $ => OLD_ROOT                   :HASH1

    ; NewRoot = LeafNodeHash = Hash( 1 | 0 | 0 | 0, Hash( Key, Hash( NewValue[0-3], NewValue[4-7] ) ) )
    ${GetValueLow()} => VALUE_LOW
    VALUE_LOW => HASH_LEFT
    ${GetValueHigh()} => VALUE_HIGH
    VALUE_HIGH => HASH_RIGHT
    $ => HASH_RIGHT                 :HASH0
    RKEY => HASH_LEFT
    $ => HASH_RIGHT                 :HASH0
    0x1 => HASH_LEFT
    $ => NEW_ROOT                   :HASH0

    ; Init LEVEL, and rotate as per key level
    0x01 => LEVEL
    ${GetLevelBit(0)}               :JMPZ(Update_LevelBit1) ; If level bit 0 is zero, then skip the next 1 rotation
                                    :ROTATE_LEVEL

Update_LevelBit1:

    ${GetLevelBit(1)}               :JMPZ(Update_ClimbTree) ; If level bit 1 is zero, then skip the next 2 rotations
                                    :ROTATE_LEVEL
                                    :ROTATE_LEVEL

Update_ClimbTree:
    ${GetTopTree()}                 :JMPZ(Update_Latch)     ; If (we are at the top of the tree) goto Update_Latch

    ${GetNextKeyBit()} => RKEY_BIT
    RKEY_BIT                        :JMPZ(Update_SiblingIsRight2) ; If next key bit is zero, then sibling is right (sibling's next key bit is 1)

Update_SiblingIsLeft2:

    ; NewRoot = Hash ( SiblingHash, NewRoot )
    NEW_ROOT => HASH_RIGHT
    ${GetSiblingHash()} => HASH_LEFT
    $ => NEW_ROOT                   :HASH0

    ; OldRoot = Hash ( SiblingHash, OldRoot )
    OLD_ROOT => HASH_RIGHT
    $ => OLD_ROOT                   :HASH0

    ; Update remaining key
                                    :CLIMB_RKEY
                                    :ROTATE_LEVEL

                                    :JMP(Update_ClimbTree)

Update_SiblingIsRight2:

    ; NewRoot = Hash ( NewRoot, SiblingHash )
    NEW_ROOT => HASH_LEFT
    ${GetSiblingHash()} => HASH_RIGHT
    $ => NEW_ROOT                   :HASH0

    ; OldRoot = Hash ( OldRoot, SiblingHash )
    OLD_ROOT => HASH_LEFT
    $ => OLD_ROOT                   :HASH0

    ; Update remaining key
                                    :CLIMB_RKEY
                                    :ROTATE_LEVEL

                                    :JMP(Update_ClimbTree)


Update_Latch:
                                    :LATCH_SET              ; At this point consistency is granted: OLD_ROOT, NEW_ROOT, RKEY (complete key), VALUE_LOW, VALUE_HIGH, LEVEL
                                    :JMP(Run)