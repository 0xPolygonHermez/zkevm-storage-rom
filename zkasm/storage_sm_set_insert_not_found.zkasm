Set_InsertNotFound:

    ; Root Node             Root Node (modified)                   # end of tree
    ;  / \                   / \                                   |
    ;    Intermediate Node      Intermediate Node (modified)       ^ climb tree
    ;     /                      / \                               |
    ;                       --->    New Value Node (new)           * start here


    ; We have not found a leaf node in the path to the key we want to insert
    ; We have to create a new leaf node (new value's) at the point when the key diverges with any other key
    ; and then, climb the tree until the top, i.e. until the root

    ; Create the a new leaf nodes for the new value

    ; NewValueHash = Hash0( VALUE_LOW, VALUE_HIGH )
    ${GetValueLow()} => VALUE_LOW, HASH_LEFT
    ${GetValueHigh()} => VALUE_HIGH, HASH_RIGHT
    $ => HASH_RIGHT                 :HASH0

    ; NewRoot = LeafNodeHash = Hash1( RKEY, Hash0( VALUE_LOW, VALUE_HIGH ) )
    ${GetRkey()} => RKEY, HASH_LEFT
    $ => NEW_ROOT                   :HASH1

SINF_InitLevel:

    ; Init LEVEL register to {1,0,0,0}, and inversely rotate it level%4 times,
    ; so that after level rotations the position of LEVEL becomes {1,0,0,0} again
    ${GetLevel()} => LEVEL

    ; Create the first intermediate node that joins the old and the new value's leaf nodes

SINF_StartOldRoot:
    ; OldRoot = sibling Hash
    0x0 => OLD_ROOT

SINF_ClimbTree:

    ; If we are at the top of the tree, then go to SINF_Latch
    ${GetTopTree()}               :JMPZ(SINF_Latch)

    ; If next key bit is zero, then the sibling hash must be at the right (sibling's key bit is 1)
    ${GetNextKeyBit()} => RKEY_BIT  :JMPZ(SINF_SiblingIsRight3)

SINF_SiblingIsLeft3:

    ; NewRoot = Hash ( SiblingHash, NewRoot )
    NEW_ROOT => HASH_RIGHT
    ${GetSiblingHash()} => HASH_LEFT
    $ => NEW_ROOT                   :HASH0

    ; OldRoot = Hash ( SiblingHash, OldRoot )
    OLD_ROOT => HASH_RIGHT
    $ => OLD_ROOT                   :HASH0

    ; Update remaining key
    LEVEL - 1 => LEVEL
                                    :CLIMB_RKEY, JMP(SINF_ClimbTree)

SINF_SiblingIsRight3:

    ; NewRoot = Hash ( NewRoot, SiblingHash )
    NEW_ROOT => HASH_LEFT
    ${GetSiblingHash()} => HASH_RIGHT
    $ => NEW_ROOT                   :HASH0

    ; OldRoot = Hash ( OldRoot, SiblingHash )
    OLD_ROOT => HASH_LEFT
    $ => OLD_ROOT                   :HASH0

    ; Update remaining key
    LEVEL - 1 => LEVEL
                                    :CLIMB_RKEY, JMP(SINF_ClimbTree)

SINF_Latch:

    ; At this point consistency is granted: OLD_ROOT, NEW_ROOT, RKEY (complete key), VALUE_LOW, VALUE_HIGH, LEVEL
    ; Return to the main loop
                                    :LATCH_SET, JMP(Run)