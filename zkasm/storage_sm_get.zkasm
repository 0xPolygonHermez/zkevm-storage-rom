Get:

    ${GetRKey()} => RKEY

    ; OldRoot = LeafNodeHash = Hash( 1 | 0 | 0 | 0, Hash( Key, Hash( Value[0-3], Value[4-7] ) ) );
    ${GetValueLow()} => VALUE_LOW
    VALUE_LOW => HASH_LEFT
    ${GetValueHigh()} => VALUE_HIGH
    VALUE_HIGH => HASH_RIGHT
    $ => HASH_RIGHT                 :HASH
    RKEY => HASH_LEFT
    $ => HASH_RIGHT                 :HASH
    0x1 => HASH_LEFT
    $ => OLD_ROOT                   :HASH

    ; Init LEVEL, and rotate as per key level
    0x1 => LEVEL
    ${GetLevelBit(0)}               :JMPZ(Get_LevelBit1)    ; If level bit 0 is zero, then skip the next 1 rotation
                                    :ROTATE_LEVEL

Get_LevelBit1:

    ${GetLevelBit(1)}               :JMPZ(Get_ClimbTree)    ; If level bit 1 is zero, then skip the next 2 rotations
                                    :ROTATE_LEVEL
                                    :ROTATE_LEVEL

Get_ClimbTree:

    ${GetTopTree()}                 :JMPZ(Get_Latch)        ; If we are at the top of the tree, then goto Get_Latch

    ${GetNextKeyBit()} => RKEY_BIT
    RKEY_BIT                        :JMPZ(Get_SiblingIsRight)
 
Get_SiblingIsLeft:

    ; OldRoot = Hash ( SiblingHash, OldRoot );
    ${GetSiblingHash()} => HASH_LEFT
    OLD_ROOT => HASH_RIGHT
    $ => OLD_ROOT                   :HASH
                                    :CLIMB_RKEY
                                    :ROTATE_LEVEL

                                    :JMP(Get_ClimbTree)

Get_SiblingIsRight:
    ; OldRoot = Hash ( OldRoot, SiblingHash );
    OLD_ROOT => HASH_LEFT
    ${GetSiblingHash()} => HASH_RIGHT
    $ => OLD_ROOT                   :HASH
                                    :CLIMB_RKEY
                                    :ROTATE_LEVEL

                                    :JMP(Get_ClimbTree)

Get_Latch:
                                    :LATCH_GET              ; At this point consistency is granted: OLD_ROOT, RKEY (complete key), VALUE_LOW, VALUE_HIGH, LEVEL