Get:

    ${isOld0()}                     :JMPZ(Get_Latch)        ; If key was not found, go directly to the latch
    ${GetRKey()} => RKEY

    ; ValueHash = Hash0( VALUE_LOW, VALUE_HIGH )
    ${GetValueLow()} => VALUE_LOW, HASH_LEFT
    ${GetValueHigh()} => VALUE_HIGH, HASH_RIGHT
    $ => HASH_RIGHT                 :HASH0

    ; OldRoot = LeafNodeHash = Hash1( Key, Hash( VALUE_LOW, VALUE_HIGH ) )
    RKEY => HASH_LEFT
    $ => OLD_ROOT                   :HASH1

Get_InitLevel:

    ; Init LEVEL register, and inversely rotate so that after level rotations
    ; the position of LEVEL becomes {1,0,0,0} again
    0x1 => LEVEL

    ; If level bit 0 is 1, then do 1 inverse rotation (i.e. 3 normal rotations)
    ${GetLevelBit(0)}               :JMPZ(Get_LevelBit1)
                                    :ROTATE_LEVEL
                                    :ROTATE_LEVEL
                                    :ROTATE_LEVEL

Get_LevelBit1:

    ; If level bit 1 is 1, then do 2 inverse rotations (i.e. 2 normal rotations)
    ${GetLevelBit(1)}               :JMPZ(Get_ClimbTree)
                                    :ROTATE_LEVEL
                                    :ROTATE_LEVEL

Get_ClimbTree:

    ; If we are at the top of the tree, then goto Get_Latch
    ${GetTopTree()}                 :JMPZ(Get_Latch)

    ; If next key bit is zero, then the sibling hash must be at the right (sibling's key bit is 1)
    ${GetNextKeyBit()} => RKEY_BIT
    RKEY_BIT                        :JMPZ(Get_SiblingIsRight)
 
Get_SiblingIsLeft:

    ; OldRoot = Hash0( SiblingHash, OldRoot );
    ${GetSiblingHash()} => HASH_LEFT
    OLD_ROOT => HASH_RIGHT
    $ => OLD_ROOT                   :HASH0

    ; Update remaining key
                                    :ROTATE_LEVEL
                                    :CLIMB_RKEY

                                    :JMP(Get_ClimbTree)

Get_SiblingIsRight:

    ; OldRoot = Hash0( OldRoot, SiblingHash );
    OLD_ROOT => HASH_LEFT
    ${GetSiblingHash()} => HASH_RIGHT
    $ => OLD_ROOT                   :HASH0

    ; Update remaining key
                                    :ROTATE_LEVEL
                                    :CLIMB_RKEY

                                    :JMP(Get_ClimbTree)

Get_Latch:
                                    :LATCH_GET              ; At this point consistency is granted: OLD_ROOT, RKEY (complete key), VALUE_LOW, VALUE_HIGH, LEVEL
                                    :JMP(Run)