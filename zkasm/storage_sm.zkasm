Run:

    ; Reset the registers to 0 before evaluate next input, if there aren't inputs, for the rest of the evaluations
    0 => HASH_LEFT, HASH_RIGHT, OLD_ROOT, NEW_ROOT, VALUE_LOW, VALUE_HIGH, SIBLING_VALUE_HASH, RKEY, SIBLING_RKEY, RKEY_BIT, LEVEL

    ${isValueZero()}                            :JMPNZ(ValueIsZero)
    ${GetValueLow()} => VALUE_LOW,VALUE_HIGH    :JMPNZ(ValueLowIsNonZero)
    ROTL_VH => VALUE_HIGH                       :JMPNZ(ValueLowIsNonZero)
    ROTL_VH => VALUE_HIGH                       :JMPNZ(ValueLowIsNonZero)
    ROTL_VH => VALUE_HIGH                       :JMPNZ(ValueLowIsNonZero)


    ${GetValueHigh()} => VALUE_HIGH,NEW_ROOT    :JMPNZ(ValueIsNonZero)
    ROTL_VH => VALUE_HIGH                       :JMPNZ(ValueHighIsNonZero)
    ROTL_VH => VALUE_HIGH                       :JMPNZ(ValueHighIsNonZero)
    ROTL_VH => VALUE_HIGH                       :JMPNZ(ValueHighIsNonZero)
                                                :JMP(AssertFails)

ValueLowIsNonZero:
    ${GetValueHigh()} => VALUE_HIGH             :JMP(ValueIsNonZero)

ValueHighIsNonZero:
    ; Restore VALUE_HIGH verified
    NEW_ROOT => VALUE_HIGH
    0 => NEW_ROOT

ValueIsNonZero:

    ${isGet()}                                  :JMPNZ(Get_NonZero)
    ${isSetUpdate()}                            :JMPNZ(Set_Update)
    ${isSetInsertFound()}                       :JMPNZ(Set_InsertFound)
    ${isSetInsertNotFound()}                    :JMPNZ(Set_InsertNotFound)
                                                :JMP(SetAllToZero)

ValueIsZero:

    ;                               GF     SDF     SDN      SZZ
    ;  GZ  Get_Zero                  -     (1)     (1)      (1)
    ;  SDF Set_DeleteFound          (1)     -      (2)      (3)
    ;  SDN Set_DeleteNotFound       (1)    (2)      -       (3)
    ;  SZZ Set_ZeroToZero           (1)    (3)     (3)       -
    ;
    ; (1) GZ finish with LATCH_GET and SXX finish with LATCH_SET a malicious prover can't change
    ;     one for other
    ; (2) Set_DeleteFound is used when sibling of node is an leaf node, and Set_DeleteNotFound
    ;     when sibling is an intermediate node. These two situations are verified and last
    ;     hash was different, leaf node use hash1, intermediate use hash0.
    ; (3) Old value is zero, .....

    0 => VALUE_LOW, VALUE_HIGH, NEW_ROOT

    ${isGet()}                                  :JMPNZ(Get_Zero)
    ${isSetDeleteFound()}                       :JMPNZ(Set_DeleteFound)
    ${isSetDeleteNotFound()}                    :JMPNZ(Set_DeleteNotFound)
    ${isSetZeroToZero()}                        :JMPNZ(Set_ZeroToZero)
                                                :JMP(SetAllToZero)

INCLUDE "storage_sm_get_zero.zkasm"
INCLUDE "storage_sm_get_non_zero.zkasm"
INCLUDE "storage_sm_get_climb_up.zkasm"
INCLUDE "storage_sm_set_update.zkasm"
INCLUDE "storage_sm_set_insert_found.zkasm"
INCLUDE "storage_sm_set_insert_not_found.zkasm"
INCLUDE "storage_sm_set_delete_found.zkasm"
INCLUDE "storage_sm_set_delete_not_found.zkasm"
INCLUDE "storage_sm_set_zero_to_zero.zkasm"

AssertFails:
SetAllToZero:
    ; Reset the registers to 0 for the rest of the evaluations
    0 => HASH_LEFT, HASH_RIGHT, OLD_ROOT, NEW_ROOT, VALUE_LOW, VALUE_HIGH, SIBLING_VALUE_HASH, RKEY, SIBLING_RKEY, RKEY_BIT, LEVEL

    ; Loop until we reach almost the end of the polynomial, i.e. only one more evaluation is pending
NotEndPol:
    ${isAlmostEndPolynomial()}                  :JMPZ(NotEndPol)

    ; The last evaluation instruction: jump to the beginning of the main rom loop, i.e. to label 0
                                                :JMP(Run)