Set_InsertFound:

    ; Root Node                                     Root Node (modified)                   # end of tree
    ;  / \                                           / \                                   |
    ;    Intermediate Node                              Intermediate Node (modified)       ^ climb tree
    ;     / \                                            / \                               |
    ;        Sibling Node (common RKEY lower bits)  --->    Intermediate Node (new)        ^ end of branch
    ;                                                        / \                           |
    ;                                                           Intermediate Node (new)    ^ climb branch
    ;                                                            / \                       |
    ;                                           (new) Sibling Node  New Value Node (new)   * start here

    ; We found a leaf node in the path to the key we want to insert
    ; We have to create 2 new leaf nodes (old and new value's) at the point when the keys diverge
    ; and then, climb the branch until we reach the found leaf node intersection
    ; and then, climb the tree until the top, i.e. until the root

    ; Create the 2 new leaf nodes: for the old found value, and for the new value

    ; At this point, value isn't zero, it's verified in storage_sm.zkasm

    ; FUTURE OPTIMIZATION Calculate SIBLING_VALUE_HASH it isn't necessary, could get
    ; directly hash of value, because the important point is validate rkey.

    ; OldValueHash = Hash0( SIBLING_VALUE_LOW, SIBLING_VALUE_HIGH )
    ${GetSiblingValueLow()} => HASH_LEFT
    ${GetSiblingValueHigh()} => HASH_RIGHT
    $ => SIBLING_VALUE_HASH, HASH_RIGHT :HASH0

    ; OldRoot = LeafNodeHash = Hash1( SIBLING_RKEY, Hash(0 SIBLING_VALUE_LOW, SIBLING_VALUE_HIGH ) )
    ${GetSiblingRkey()} => SIBLING_RKEY
    SIBLING_RKEY => HASH_LEFT
    $ => OLD_ROOT                   :HASH1

    ; NewValueHash = Hash0( VALUE_LOW, VALUE_HIGH )
    VALUE_LOW => HASH_LEFT
    VALUE_HIGH => HASH_RIGHT
    $ => HASH_RIGHT                 :HASH0

    ; NewRoot = LeafNodeHash = Hash1( RKEY, Hash0( VALUE_LOW, VALUE_HIGH ) )
    ${GetRkey()} => RKEY, HASH_LEFT
    $ => NEW_ROOT                   :HASH1

SIF_InitLevel:

    ; Init LEVEL register to {1,0,0,0}, and inversely rotate it level%4 times,
    ; so that after level rotations the position of LEVEL becomes {1,0,0,0} again
    ${GetLevel()} => LEVEL

    ; Create the first intermediate node that joins the old and the new value's leaf nodes

SIF_FirstIntermediateNode:

    LEVEL - 1 => LEVEL

    ; If next key bit is zero, then the sibling hash must be at the right (sibling's key bit is 1)
    ${GetNextKeyBit()} => RKEY_BIT  :JMPZ(SIF_SiblingIsRight1) ; If next key bit is zero, then sibling is right (sibling's next key bit is 1)

SIF_SiblingIsLeft1:

    ; NewRoot = Hash0( SiblingHash, LeafNodeHash )
    OLD_ROOT => HASH_LEFT
    NEW_ROOT => HASH_RIGHT
    $ => NEW_ROOT                   :HASH0

    ; Update remaining keys
    $ => RKEY                       :CLIMB_RKEY
    $ => SIBLING_RKEY               :CLIMB_SIBLING_RKEY_N, JMP(SIF_ClimbBranch)

SIF_SiblingIsRight1:

    ; NewRoot = Hash0( LeafNodeHash, SiblingHash )
    NEW_ROOT => HASH_LEFT
    OLD_ROOT => HASH_RIGHT
    $ => NEW_ROOT                   :HASH0

    ; Update remaining keys
    $ => RKEY                       :CLIMB_RKEY
    $ => SIBLING_RKEY               :CLIMB_SIBLING_RKEY_N

SIF_ClimbBranch:

    ${GetTopOfBranch()}             :JMPZ(SIF_StartOldRoot) ; If we are at the top of the branch, then go to SIF_StartOldRoot

    LEVEL - 1 => LEVEL

    ; If next key bit is zero, then the sibling hash must be at the right (sibling's key bit is 1)
    ${GetNextKeyBit()} => RKEY_BIT  :JMPZ(SIF_SiblingIsRight2)

SIF_SiblingIsLeft2:

    ; NewRoot = Hash0( 0, NewRoot )
    0x0 => HASH_LEFT
    NEW_ROOT => HASH_RIGHT
    $ => NEW_ROOT                   :HASH0

    ; Update remaining keys
    $ => RKEY                       :CLIMB_RKEY
    $ => SIBLING_RKEY               :CLIMB_SIBLING_RKEY, JMP(SIF_ClimbBranch)

SIF_SiblingIsRight2:

    ; NewRoot = Hash0( NewRoot, 0 )
    NEW_ROOT => HASH_LEFT
    0x0 => HASH_RIGHT
    $ => NEW_ROOT                   :HASH0

    ; Update remaining keys
    $ => RKEY                       :CLIMB_RKEY
    $ => SIBLING_RKEY               :CLIMB_SIBLING_RKEY, JMP(SIF_ClimbBranch)

SIF_StartOldRoot:
    ; OldRoot = Hash1( SIBLING_RKEY, SIBLING_VALUE_HASH );
    SIBLING_RKEY => HASH_LEFT
    SIBLING_VALUE_HASH => HASH_RIGHT
    $ => OLD_ROOT                   :HASH1

SIF_ClimbTree:

    ; If we are at the top of the tree, then go to SIF_Latch
    LEVEL                           :JMPZ(SIF_Latch)
    LEVEL - 1 => LEVEL

    ; If next key bit is zero, then the sibling hash must be at the right (sibling's key bit is 1)
    ${GetNextKeyBit()} => RKEY_BIT  :JMPZ(SIF_SiblingIsRight3)

SIF_SiblingIsLeft3:

    ; NewRoot = Hash ( SiblingHash, NewRoot )
    NEW_ROOT => HASH_RIGHT
    ${GetSiblingHash()} => HASH_LEFT
    $ => NEW_ROOT                   :HASH0

    ; OldRoot = Hash ( SiblingHash, OldRoot )
    OLD_ROOT => HASH_RIGHT
    $ => OLD_ROOT                   :HASH0

    ; Update remaining keys
    $ => RKEY                       :CLIMB_RKEY
    $ => SIBLING_RKEY               :CLIMB_SIBLING_RKEY, JMP(SIF_ClimbTree)

SIF_SiblingIsRight3:

    ; NewRoot = Hash ( NewRoot, SiblingHash )
    NEW_ROOT => HASH_LEFT
    ${GetSiblingHash()} => HASH_RIGHT
    $ => NEW_ROOT                   :HASH0

    ; OldRoot = Hash ( OldRoot, SiblingHash )
    OLD_ROOT => HASH_LEFT
    $ => OLD_ROOT                   :HASH0

    ; Update remaining keys
    $ => RKEY                       :CLIMB_RKEY
    $ => SIBLING_RKEY               :CLIMB_SIBLING_RKEY, JMP(SIF_ClimbTree)

SIF_Latch:

    ; At this point consistency is granted: OLD_ROOT, NEW_ROOT, RKEY (complete key), VALUE_LOW, VALUE_HIGH, LEVEL
    ; Return to the main loop
                                    :LATCH_SET, JMP(Run)